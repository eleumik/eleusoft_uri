<?xml version="1.0" encoding="utf-8"?><!--

This file has been generated by Eleant Version 1.0
from an *.eleant configuration file for project:

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Eleant Name:	eleusoft_uri
Title:			Eleusoft URI	
Version:		1.0
Eleant file:	configs/eleusoft_uri.eleant 
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Permanent changes should be applied to the cited .eleant file 
rather than to this file, in order to generate a new build.xml 
file like the one that contains this fragment (this file).

--><project xmlns:eleant="http://www.eleusoft.org/eleant" eleant:time="20130603-1308" eleant:today="June 3 2013" eleant:version="1.0" name="eleusoft_uri" eleant:project.name="eleusoft_uri" eleant:project.label="Eleusoft URI" eleant:project.version="1.0" eleant:filename="configs/eleusoft_uri.eleant" basedir="." default="help">
<fail if="${eleant_1_0_xml_entity}"/>
<description>Build file for Eleusoft URI</description>
<property name="eleant.version" value="1.0"/>
<property name="name" value="eleusoft_uri"/>
<property name="version" value="1.0"/>
<property name="project.label" value="Eleusoft URI"/>
<property name="project.organization" value="Eleusoft"/>
<property name="Name" value="eleusoft_uri"/>
<property name="project.copyright" value="2005-${year}"/>
<property file="${user.home}/build.${name}.properties"/>
<property file="${user.home}/build.properties"/>
<property file="${basedir}/build.properties"/>
<property file="${basedir}/default.properties"/>
<target name="init" depends="stdProjectPaths, stdJavadoc">
<!--Project license file. For global properties override consistency use [license.] prefix.-->
<property name="license.eleusoft_uri" value="./license.txt"/>
<property name="project.license" location="${license.eleusoft_uri}"/>
<!--Java source files. For global properties override consistency use [src.] prefix.-->
<property name="src.eleusoft_uri" location="${src.home}"/>
<property name="project.src" location="${src.eleusoft_uri}"/>
<!--Project library installation. For global properties override consistency use [jar.] prefix.-->
<property name="jar.eleusoft_uri" location="${jar.home}/${project.jar.filename}"/>
<property name="project.jar" location="${jar.eleusoft_uri}"/>
<!--Project tests installation. For global properties override consistency use [jar.] prefix.-->
<property name="jar.tests.eleusoft_uri" location="${jar.home}/${project.tests.jar.filename}"/>
<property name="project.tests.jar" location="${jar.tests.eleusoft_uri}"/>
<!--javac packages-->
<property name="javac.packages" value="org/eleusoft/uri/*,org/eleusoft/uri/java4/*,org/eleusoft/uri/apache/*,"/>
<!--javac packages exclude-->
<property name="javac.packages.exclude" value=""/>
<!--javadoc packages as a dirset-->
<dirset id="javadoc.packages.dirset" dir="${project.src}" defaultexcludes="yes">
<include name="org/eleusoft/uri"/>
<include name="org/eleusoft/uri/java4"/>
<include name="org/eleusoft/uri/apache"/>
</dirset>
<!--Jar manifest-->
<property name="manifest.name" value="${name}"/>
<property name="work.manifest" value="MANIFEST.MF"/>
<manifest file="MANIFEST.MF">
<section name="${manifest.name}">
<attribute name="Implementation-Title" value="${project.label}"/>
<attribute name="Implementation-Version" value="${version}"/>
<attribute name="Implementation-Vendor" value="${project.organization}"/>
<attribute name="AntID" value="${name}"/>
</section>
<attribute name="Built-By" value="${user.name}"/>
<attribute name="Built-At" value="${now}"/>
<section name="org/eleusoft/uri">
<attribute name="Specification-Title" value="Eleusoft URI interfaces"/>
<attribute name="Specification-Vendor" value="Eleusoft"/>
<attribute name="Specification-Version" value="1.0"/>
</section>
<section name="org/eleusoft/uri/java4">
<attribute name="Implementation-Version" value="1.1"/>
<attribute name="Implementation-Title" value="JDK1.4+ URI implementation based on java.net.URI"/>
<attribute name="Implementation-Vendor" value="Eleusoft"/>
</section>
<section name="org/eleusoft/uri/apache">
<attribute name="Implementation-Version" value="1.05"/>
<attribute name="Implementation-Title" value="JDK1.2+ URI implementation based on apache URI "/>
<attribute name="Implementation-Vendor" value="Eleusoft"/>
</section>
</manifest>
<property name="jar.commons-codec" value="${lib.home}/commons-codec-1.4.jar"/>
<!--Javac Classpath. For global properties override consistency use [jar.] prefix-->
<property name="javac.classpath" value="${jar.commons-codec};"/>
<!--Check all jars exist-->
<echo>Checking jar.commons-codec</echo>
<available file="${jar.commons-codec}" property="exist.commons-codec"/>
<echo>${jar.commons-codec} available : ${exist.commons-codec}</echo>
<fail message="The jar file [commons-codec] does not exist [${jar.commons-codec}]. Build will stop." unless="exist.commons-codec"/>
<!--Javadoc Classpath.-->
<property name="javadoc.classpath" value="${javac.classpath}"/>
<!--javadoc links - For global properties override consistency use [packagelist.] prefix 
	Note: for local links the file must be an URI eg: file:/docs/api/-->
<property name="packagelist.jdk" value="http://java.sun.com/j2se/1.5.0/docs/api/"/>
<property name="javadoc.link.1" value="${packagelist.jdk}"/>
<!--Compilation build extra files (those included in the jar). 
		For example configuration files but not images or package.html.-->
<fileset id="compile.extra.fileset" dir="${project.src}">
<include name="**/org/eleusoft/uri/*.properties"/>
<include name="**/org/eleusoft/uri/java4/*.properties"/>
<include name="**/org/eleusoft/uri/apache/*.properties"/>
</fileset>
<fileset id="project.copysource" dir="${project.src}">
<!--Source includes/excludes for org/eleusoft/uri-->
<exclude name="**/Thumbs.db"/>
<include name="org/eleusoft/uri/doc-files/*.*"/>
<include name="org/eleusoft/uri/*.java"/>
<include name="org/eleusoft/uri/*.properties"/>
<include name="org/eleusoft/uri/*.jpeg"/>
<include name="org/eleusoft/uri/*.jpg"/>
<include name="org/eleusoft/uri/*.gif"/>
<include name="org/eleusoft/uri/*.html"/>
<!--Source includes/excludes for org/eleusoft/uri/java4-->
<exclude name="**/Thumbs.db"/>
<include name="org/eleusoft/uri/java4/doc-files/*.*"/>
<include name="org/eleusoft/uri/java4/*.java"/>
<include name="org/eleusoft/uri/java4/*.properties"/>
<include name="org/eleusoft/uri/java4/*.jpeg"/>
<include name="org/eleusoft/uri/java4/*.jpg"/>
<include name="org/eleusoft/uri/java4/*.gif"/>
<include name="org/eleusoft/uri/java4/*.html"/>
<!--Source includes/excludes for org/eleusoft/uri/apache-->
<exclude name="**/Thumbs.db"/>
<include name="org/eleusoft/uri/apache/doc-files/*.*"/>
<include name="org/eleusoft/uri/apache/*.java"/>
<include name="org/eleusoft/uri/apache/*.properties"/>
<include name="org/eleusoft/uri/apache/*.jpeg"/>
<include name="org/eleusoft/uri/apache/*.jpg"/>
<include name="org/eleusoft/uri/apache/*.gif"/>
<include name="org/eleusoft/uri/apache/*.html"/>
<!--User defined dist[@type="src" or @type="common"]/*[self::include or self::exclude] for all packages (with @name).-->
</fileset>
</target>
<target name="_event.alldist">
<!--JAR [commons-codec] copy to dist folder-->
<copy file="${jar.commons-codec}" tofile="${_event.param.dest}/${lib.home}/commons-codec-1.4.jar"/>
<copy failonerror="false" file="${license.commons-codec}" tofile="${_event.param.dest}/${lib.home}/license-commons-codec${license.extension}"/>
</target>
<target name="fixcrlf" depends="~init" description="Fix CRLF issues in source files">
<echo>Fixing CRLF in source files</echo>
<fixcrlf srcdir="${project.src}" excludes="" eol="crlf">
<include name="org/eleusoft/uri/*.java"/>
<include name="org/eleusoft/uri/java4/*.java"/>
<include name="org/eleusoft/uri/apache/*.java"/>
</fixcrlf>
</target>
<property name="test.defined" value="true"/>
<property name="test.src.dir" value="${src.test.eleusoft_uri}"/>
<target name="~inittest" depends="~initwork">
<property name="test.javac.classpath" value="${jar.commons-codec};${jar.junit};${jar.ineo};"/>
</target>
<target name="jartest" depends="~inittest, ~jartest" description="Builds the tests jar."/>
<target name="~jartest" depends="~inittest">
<available type="file" file="${project.jar}" property="test.jar.available"/>
<fail unless="test.jar.available" message="The project jar is not available, build it first using [ant jaronly]"/>
<property name="test.package" value="junit/org/eleusoft/uri"/>
<available type="dir" file="${test.src.dir}" property="test.src.available"/>
<fail unless="test.src.available" message="Not available: [test.src.dir]=${test.src.dir}"/>
<echo>Test source found</echo>
<delete dir="${work.test.dir}"/>
<mkdir dir="${work.test.dir}"/>
<echo>Test Src Dir: ${test.src.dir}</echo>
<echo>Test Classpath:${test.javac.classpath}</echo>
<javac srcdir="${test.src.dir}" destdir="${work.test.dir}" includes="junit/org/eleusoft/uri/**" optimize="${javac.optimize}" classpath="${test.javac.classpath}${project.jar}" listfiles="${javac.listfiles}" debug="${javac.debug}"/>
<copy todir="${work.test.dir}">
<fileset dir="${test.src.dir}">
<include name="junit/org/eleusoft/uri/*.properties"/>
</fileset>
</copy>
<jar jarfile="${project.tests.jar}" basedir="${work.test.dir}" manifest="MANIFEST.MF"/>
</target>
<target name="test" depends="jartest, runtest" description="Makes a jar of tests and runs them."/>
<target name="runtest" depends="~inittest" description="Runs the test without compilation.">
<!--Test Suite junit.org.eleusoft.uri.URITestSuite-->
<java classname="${test.runner}" fork="yes" failonerror="${test.failonerror}" classpath="${test.javac.classpath}${project.jar};${project.tests.jar};">
<arg value="junit.org.eleusoft.uri.URITestSuite"/>
<sysproperty key="org.eleusoft.uri.URIProvider" value="org.eleusoft.uri.apache.ApacheURIProvider"/>
</java>
<!--Test Suite junit.org.eleusoft.uri.URITestSuite-->
<java classname="${test.runner}" fork="yes" failonerror="${test.failonerror}" classpath="${test.javac.classpath}${project.jar};${project.tests.jar};">
<arg value="junit.org.eleusoft.uri.URITestSuite"/>
<sysproperty key="org.eleusoft.uri.URIProvider" value="org.eleusoft.uri.java4.Java4URIProvider"/>
</java>
<!--Test Suite junit.org.eleusoft.uri.URITestSuite-->
<java classname="${test.runner}" fork="yes" failonerror="${test.failonerror}" classpath="${test.javac.classpath}${project.jar};${project.tests.jar};">
<arg value="junit.org.eleusoft.uri.URITestSuite"/>
<sysproperty key="org.eleusoft.uri.URIProvider" value="org.eleusoft.uri.java4.Java4URIProviderDefault"/>
</java>
</target>
<!--
	ELEANT BUILD TEMPLATE FILE
	
	This is the content of the [eleant.xml] file.

	You can find these lines of code in the source eleant.xml
	or in a build.xml file specific of a certain project and generated
	from an *.eleant file.
	The content of the eleant.xml file (the following lines) 
	is automatically included in the build.xml,
	so permanent changes must be done to eleant.xml and not 
	in the generated build.xml that should not be updated apart for debug purposes.

	This file has two kind of failures/exceptions:
	Eleant Ant File Usage Error - When internal targets are called from outside.
	INTERNAL ERROR 				- When internally an internal target is used in a way is not supposed to.

	Modifications:
		-	20070208 Moved 'default targets' handling to identity.xslt because 
			is not anymore possible to have duplicate targets.
-->
<!--
	The ${eleant_1_0_xml_entity} ant property is checked in the result build.xml 
	by the code generated by eleant.xslt. If is not present the code will stop.
-->
<property name="eleant_1_0_xml_entity" value="true"/>



<!--
	<p>[stdProjectPaths] target creates defaults for home paths of the project,
	the paths used to configure the project. For example where is the source
	code or where to output the build.
	<p>The way to change these properties in a new build, for example to change
	the source from ./src to ./src/java is this:
	- Set the source global property of the project to where the source root is.
	- Create a default.properties filed in the build folder setting src.home=./src/java
	= Build the project as source distribution, default.properties will be copied automatically.
	The function of the default.properties is to carry to the next build the info
	about the customized paths, in this case for the source. In some cases like this it 
	is extremely relevant because otherwise the project cannot build a copy of itself,
	other properties like the destination of build archive files can also be set once.

	<p>[stdProjectPaths] target defines the following properties 
	if they have not been defined in property files 
	or using command line options:</p>
	<ul>
	<p>Temp files</p>
	<li><code>temp.dir</code> The temporary folder
	<p>Project structure</p>
	<li><code>jar.home</code> The base directory for the jar
	<li><code>src.home</code> The base directory for the source files
	<li><code>javadoc.bin.home</code> The base directory for the javadoc in the binary distribution
	<li><code>lib.home</code> The base directory for the libraries (jars)
	<p>Build output structure</p>
	<li><code>build.home</code> The base directory for the build output
	<li><code>build.zip.home</code> The base directory for archives output
	<li><code>build.classes.home</code> The base directory for the classes output
	<li><code>build.javadoc.home</code> The base directory for the javadoc output
	<p>Javadoc</p>
	<li><code>javadoc.group</code> The groups parameter for the javadoc "" by def
	<p>JAR</p>
	<li><code>project.jar.filename</code> The name of the jar output of this project
	<p>Distribution folders names</p>
	<li><code>dist.dirname</code> The base name of the distribution folder
	<li><code>distbin.dirname</code> The name of the distribution folder of binary dist (by default same as <code>${dist.dirname}</code>)
	<li><code>distsrc.dirname</code> The name of the archive files of binary dist (by default <code>${dist.dirname}_src</code> )
	<p>Distribution folders </p>
	<li><code>distbin</code> The location of the distribution folder of the binary dist (by default <code>${build.home}/${distbin.dirname}</code>)
	<li><code>distsrc</code> The name of the archive files of binary dist (by default <code>${build.home}/${dissrc.dirname}</code> )
	<p>Archive names</p>
	<li><code>archive.name</code> The base name of the archive files
	<li><code>archive.bin.name</code> The name of the archive files of binary dist (by default same as <code>${archive.name}</code>)
	<li><code>archive.src.name</code> The name of the archive files of source dist (by default <code>${archive.name}_src</code> )
	<li><code>archive.javadoc.name</code> The name of the archive files of binary dist (by default ${archive.name}_javadoc</code>)
	<p>Archive files</p>
	<li><code>srctar.file</code> The location of the tar of the source dist
	<li><code>bintar.file</code> The location of the tar of the binary dist
	<li><code>srczip.file</code> The location of the zip of the source dist
	<li><code>binzip.file</code> The location of the zip of the binary dist
	<li><code>javadoc.zip.file</code> The location of the zip of the javadoc
	<li><code>javadoc.zip.file</code> The location of the zip of the javadoc
	
	<p>Others</p>
	<li><code>project.license.file</code> The license file 
	<li><code>project.readme.file</code> The readme file
	<li><code>project.version.file</code> The version file (filtered expanding properties)
	<p>JDepend</p>
	<li><code>jdepend.format</code> The output format for jdepend report
	</ul>
	<p>note: add the version to the archive file 
	but not to the contained jar
	See <a href='http://www.developer.com/tech/article.php/998241'>
	http://www.developer.com/tech/article.php/998241</a>
	<p>2nd NOTE VERY IMPORTANT: if one types a comment with no content some xslt will crash.

	
-->
<target name="stdProjectPaths">
<!-- 
	Implementation notes:
	- - - - - - - - - - -
	This target can read the following properties:
	
	name (the eleant project name)
	Name
	version (the project version)
	project.label
	project.organization
	project.copyright
	
	The values contained in the following property files will override the 
	values of this target.
	
	file="${user.home}/build.${name}.properties"
	file="${user.home}/build.properties"
	file="${basedir}/build.properties"
	file="${basedir}/default.properties"
	
	-->

	<tstamp/>
	<property name="now" value="${DSTAMP}-${TSTAMP}"/>								<!--docdone-->
	<!-- users should update the year in global property file --> 
  	<property name="year" value="2008"/>											<!--docdone-->
	<!-- the temp folder and working folders -->
	<property name="temp.dir" location="${java.io.tmpdir}"/>					<!--docdone-->
	<!-- the base directory where the source files are placed by default -->
	<property name="src.home" value="./src"/>
	<!-- the base directory where the test source files are placed by default -->
	<property name="test.home" value="."/>										<!-- -->
	<property name="test.runner" value="junit.textui.TestRunner"/> 				<!--docdone-->
 	<property name="test.failonerror" value="true"/> 								<!--docdone-->
 	<!-- give a default to the test dir for this project -->
 	<property name="src.test.${name}" location="${test.home}"/>
	<!-- the -groups argument for javadoc -->
	<property name="javadoc.groups" value=""/>    						<!-- -->
	
	<!-- the base directory where the project javadoc is placed in binary distribution Eg: docs/javadoc-->
	<property name="javadoc.bin.home" value="./javadoc"/>    						<!--docdone-->
	<!-- the base directory where the jar files are read -->
	<property name="lib.home" value="./lib"/> 									<!--!!!!-->
	<!-- the base directory where the project jar file is placed by default -->
	<property name="jar.home" value="${lib.home}"/>    							<!--docdone-->
	
	<!-- dist build folders  -->
	<property name="build.home" location="./build"/> 								<!--docdone-->   
	<!-- the base directory where the project javadoc is placed -->
	<!-- I prefer all in build, someone might want it in ./javadoc -->
	<property name="build.javadoc.home" value="${build.home}/javadoc"/>    
	<!-- the base directory where the dist zip and tar files are placed -->
	<property name="build.zip.home" value="${build.home}/zip"/>    
	<!-- the base directory where the class files are placed -->
	<property name="build.classes.home" location="${build.home}/classes/"/>    
	
	<!-- JAR The file name of project jar  -->
	<property name="project.jar.filename" value="${name}.jar"/>
    <!-- JAR The file name of project tests jar -->
	<property name="project.tests.jar.filename" value="${name}_tests.jar"/>
    
    <!-- bin and src distributions folders names.  -->
	<property name="dist.dirname" value="${name}_${version}"/>    
	<property name="distbin.dirname" value="${dist.dirname}"/>    
	<property name="distsrc.dirname" value="${dist.dirname}_src"/>    
	
	<!-- bin and src distributions folders   -->
	<property name="distbin" location="${build.home}/${distbin.dirname}"/>
	<property name="distbin.lib" location="${distbin}/${lib.home}"/>
	<property name="distbin.jar" location="${distbin}/${jar.home}"/>
	<property name="distbin.javadoc" location="${distbin}/${javadoc.bin.home}"/>
	

	<property name="distsrc" location="${build.home}/${distsrc.dirname}"/>
	<property name="distsrc.source.dir" location="${distsrc}/${src.home}"/>
	<property name="distsrc.test.source.dir" location="${distsrc}/${test.home}"/>
		
	<property name="archive.name" value="${name}_${version}"/>    
	<property name="archive.src.name" value="${archive.name}_src"/>    
	<property name="archive.bin.name" value="${archive.name}"/>    
	<property name="archive.javadoc.name" value="${archive.name}_javadoc"/>    
	
	<!-- archives -->
	<property name="srctar.file" location="${build.zip.home}/${archive.src.name}.tar.gz"/>
	<property name="bintar.file" location="${build.zip.home}/${archive.bin.name}.tar.gz"/>
	<property name="srczip.file" location="${build.zip.home}/${archive.src.name}.zip"/>
	<property name="binzip.file" location="${build.zip.home}/${archive.bin.name}.zip"/>
	<property name="javadoc.zip.file" location="${build.zip.home}/${archive.javadoc.name}.zip"/>
	<property name="javadoc.tar.file" location="${build.zip.home}/${archive.javadoc.name}.tar.gz"/>
	<!-- JDepend -->
	
	<property name="jdepend.xslt" value="${ant.home}/etc/jdepend.xsl"/>
	<property name="jdepend.path" location="${jar.home}"/>
	<property name="jdepend.outdir" location="${build.home}/jdepend"/>
	
	<!-- Project readme file -->
	 <property name="project.readme.file" location="./readme.txt"/>
	 <property name="project.version.file" location="./version.txt"/>
	<!-- REMOVED the license file must be inserted in client init, to enable global override -->
	<!--property name="project.license.file"  location="./license.txt" /--> 
	<!-- this is the extension used for jars licenses -->
	<property name="license.extension" value=".LICENSE"/> 
	
        
</target>        
<!--
	Targets that define defaults for javadoc 
-->

<target name="stdJavadoc" depends="stdJavadocFooterUrl,stdJavadocFooter">
	<property name="javadoc.title" value="${project.label}"/>
	<property name="javadoc.doctitle" value="${project.label}"/>
</target>

<target name="stdJavadocFooterUrl" if="project.url">
	<property name="javadoc.footer" value="   &lt;em&gt;${Name}&lt;/em&gt; -  &lt;a href='${project.url}'&gt;${project.url}&lt;/a&gt; -   &lt;small&gt;Copyright &amp;copy; ${project.copyright}  ${project.organization}   - Documentation generated ${TODAY}&lt;/small&gt;.   "/> 
</target>

<target name="stdJavadocFooter" unless="project.url">
	<echo message="Generate javadoc footer: project has no url."/>
	<property name="javadoc.footer" value="   &lt;em&gt;${Name}&lt;/em&gt; -    &lt;small&gt;Copyright &amp;copy; ${project.copyright} ${project.organization}   - Documentation generated ${TODAY}&lt;/small&gt;.   "/> 
</target>
	


<!--
	Internal initialization target. This is a sort of abstract init that expects an <code>init</code> target 
	to be defined. It performs some housekeeping after that <code>init</code> is executed.
	All the targets of this file depend on this target: <code>~init</code>, not on <code>init</code> -->
	<target name="~init" depends="init">
		<fail unless="eleant.version" message="INTERNAL ERROR: There is no $eleant.version in the result file."/>
		<echo>Using eleant v. ${eleant.version}</echo>
		
		<!-- build work dirs paths -->
		<property name="work.dir" location="${temp.dir}/buildtemp_${name}_deletesafely"/>
		<property name="work.classes" location="${work.dir}/classes"/>
		<property name="work.javadoc" location="${work.dir}/javadoc"/>
		<property name="work.test.dir" location="${work.dir}/test"/>
			
		<!-- DEFAULT VALUES -->
		<!-- compilation params -->
		<property name="javac.optimize" value="on"/>
		<property name="javac.listfiles" value="false"/>
		<property name="javac.debug" value="off"/>
		<!-- build.compiler is used for javac automagically by ant -->
		<property name="build.compiler" value="classic"/>
		<!-- javadoc -->
		<property name="javadoc.linksource" value="yes"/> 
		<property name="javadoc.access" value="protected"/> 
		<property name="javadoc.css" value="./javadoc.css"/> 
		<property name="javadoc.author" value="true"/> 
		<property name="javadoc.use" value="true"/> 
		<property name="javadoc.version" value="true"/> 
		<property name="javadoc.verbose" value="false"/> 
		<!-- tar compression -->
		<property name="tar.compression" value="gzip"/> 
		<!-- END - DEFAULT VALUES-->
	</target>
	<target name="~initwork" depends="~init">
		<echo>Using eleant v. ${eleant.version}</echo>
		<fail if="__initialized" message="ELEANT INTERNAL ERROR: Cannot call init if already initialized"/>
    	<fail if="${temp.dir}" message="ELEANT INTERNAL ERROR: Cannot get temp dir ${temp.dir}"/>
		
		<!-- clean working dir --> 
		<delete dir="${work.dir}"/>
		<mkdir dir="${work.dir}"/>
		<!-- final step: set __initialized flag -->
		<property name="__initialized" value="true"/> 
	</target>

	
	<!-- 
    	Internal Helper of [src] 
    	included in depends in first place
    	to have possibility to check first 
    	if can delete dir when doing dist bin
    	instead of failing after long compile
    -->
    <target name="~preparedistsrc" depends="~init">
    	<!-- clean and create dirs -->
		<delete dir="${distsrc}"/>
		<mkdir dir="${distsrc}"/>

		<mkdir dir="${distsrc.source.dir}"/>
        
    </target>
    <!-- 
	<code><b>src</b></code> -  Builds the source distribution to ${distsrc}

		<ul><p>Operations:</p>
		<li>	deletes and creates ${distsrc} dir
		<li>	creates source folder  (default is ${distsrc}/${src.home} == ${distsrc}/src )
		<li>	copies project-init-defined fileset with id [project.copysource] to ${distsrc}/${src.home} 
		<li>	ant-calls project-specific _event.src.pre
		<li>	ant-calls [~copycommonbuild] to copy the distribution common files to ${distsrc}
		<li>	copies build.properties, build.xml and javadoc.css
		<li>	ant-calls project-specific _event.src.post
		</ul>
		<p>The project-defined fileset with id [project.copysource] 
		should contain all the source files, if is not possible use 
		[_event.src.pre] or [_event.src.post] events 
	-->
        
	<target name="src" depends="~preparedistsrc, ~compile" description="Builds the source distribution">
        
        <!-- client event -->
		<antcall target="_event.src.pre"/>
        
        <!-- copy init-configured source files fileset -->
		<copy todir="${distsrc.source.dir}">
			<fileset refid="project.copysource"/>
		</copy>
		
        <!-- copy common distribution files -->
        <antcall target="~copycommonbuild">
            <param name="~copycommonbuild.dest" value="${distsrc}"/>
        </antcall>
        <!-- copy build file and properties  ?? TODO DOC ??-->
        <copy file="build.xml" todir="${distsrc}/"/>       
        <copy file="${name}.eleant" todir="${distsrc}/"/>       
        <copy failonerror="false" file="build.properties.default" tofile="${distsrc}/build.properties"/>
		<!-- added 200702 was forgetting ..hmm..is true that if one overrides out of the
			default.properties things like destination path for source java in source dist,
			how can know the next builder this ? Here should produce props that inform of this....but..-->
        <copy failonerror="false" file="default.properties" tofile="${distsrc}/default.properties"/>
        <!-- copy javadoc.css -->
        <copy file="${javadoc.css}" todir="${distsrc}"/>
        <!-- copy jars redistribuited with source -->
    	<copy todir="${distsrc}/${lib.home}">
			<fileset refid="distsrc.redistribuitedjars.fileset"/>
		</copy>
		<!-- client event -->
		<antcall target="_event.src.post"/>
        
	</target>
    
    <!-- 
    	Internal Helper of [bin] 
    	included in depends in first place
    	to have possibility to check first 
    	if can delete dir when doing dist bin
    	instead of failing after long compile
    -->
    <target name="~preparedistbin" depends="~init">
    	<!-- clean and create dirs -->
		<delete dir="${distbin}"/>
		<mkdir dir="${distbin}"/>
		<!-- lib and jar can be separated =	jar is for proj jar - lib is external -->
		<mkdir dir="${distbin.lib}"/>
		<mkdir dir="${distbin.jar}"/>

    </target>
    <!-- 
	<code><b>bin</b></code> -  Builds the binary distribution to ${distbin}

		<ul><p>Operations:</p>
		<li>	deletes and creates ${distbin} dir. Default is ${build.home}/${project.name}
		<li>	creates libraries folder  (default is '${distbin}/lib') 
				in ${distbin}/${lib.home}
		<li>	ant-calls jarhelper to create project JAR to destination (TODO change to depends)
		<li>	copies javadoc output to ${distbin}/${javadoc.bin.home}, by default ${distbin}/javadoc
				but might be also for example ${distbin}/docs/javadoc
		<li>	ant-calls [~copycommonbuild] to copy the distribution common files to ${distsrc}
		<li>	call <b>event-target</b> with id <code>_event.bin.dest</code>
		</ul>
	-->
    <target name="bin" depends="~preparedistbin,~compile,~dojavadoc,~jartest" description="build binary distribution">
		
		<!-- client event -->
		<antcall target="_event.bin.pre"/>
		<!-- create user project jar, always to  ${distbin.jar}-->
        <antcall target="~dojarhelper">
			<param name="~dojarhelper.jar" value="${distbin.jar}/${project.jar.filename}"/>
		</antcall>
		<!-- copy generated javadoc -->
		<copy todir="${distbin.javadoc}">
			<fileset dir="${work.javadoc}"/>
		</copy>
		<!-- copy common build files -->
		<antcall target="~copycommonbuild">
			<param name="~copycommonbuild.dest" value="${distbin}"/>
		</antcall>
		<!-- copy jars redistribuited with binary distribution -->
    	<copy todir="${distbin}/${lib.home}">
			<fileset refid="distbin.redistribuitedjars.fileset"/>
		</copy>
		<!-- Call ~dotestjarhelper to have the test jar moved to the bin dist lib-->
		<!-- TODO here should do like the others..copy the workdir..-->
		<!--antcall target='~dotestjarhelper'>
			<param name='~dotestjarhelper.dest' value='${distbin.jar}'/>
		</antcall-->
		<copy file="${{project.tests.jar}}" todir="${{~dotestjarhelper.dest}}" failonerror="false"/>
	

        <!-- client event -->
		<antcall target="_event.bin.post"/>
        
	</target>

	<!-- 
	<code><b>build</b></code> -  Compile the classes to ${build.classes.home},
		that is by default ${build.home}/classes

		<ul><p>Operations:</p>
		<li>	creates a clean ${build.classes.home} dir for copying classes
		<li>	copies <code>~compile</code> target output to ${build.classes.home}
		</ul>
		-->
	<target name="build" depends="~compile" description="Builds the classes">
		<delete dir="${build.classes.home}"/>
		<mkdir dir="${build.classes.home}"/>
		<copy todir="${build.classes.home}">
			<fileset dir="${work.classes}"/>
		</copy>
	</target> 

    
	<!-- 
	<code><b>~compile</b></code> -  Internal helper 

		<ul><p>Operations:</p>
		<li>	creates a clean ${work.classes} dir for outputting classes
		<li>	copies project-specific fileset with id <code>_compile.copy.fileset</code>
		<li>	ant-calls [_event.compile.pre] <b>event-target</b> 
				to let user make a copy of other files needed at compilation time.
		<li>	calls javac for packages ${javac.packages} 
				with source files in ${project.src} 
				outputs classes in temp folder ${work.classes}
		<li>	ant-calls [_event.compile.post] <b>event-target</b> 
				to let user make a copy of other files needed	
		</ul>
		-->
	<target name="~compile" depends="~initwork">
		<delete dir="${work.classes}"/>
		<mkdir dir="${work.classes}"/>
		<copy todir="${work.classes}">
		    <fileset refid="compile.extra.fileset"/>
        </copy>
        <echo>javac.packages= ${javac.packages}</echo>
		<echo>javac.packages.exclude= ${javac.packages.exclude}</echo>
		<echo>Project classpath= ${javac.classpath}</echo>
		<echo>Project src= ${project.src}</echo>
		<antcall target="_event.compile.pre"/>
		<path id="_source.path">
		</path>
		<javac sourcepathref="_source.path" srcdir="${project.src}" destdir="${work.classes}" includes="${javac.packages}" excludes="${javac.packages.exclude}" optimize="${javac.optimize}" classpath="${javac.classpath}" listfiles="${javac.listfiles}" debug="${javac.debug}">    
		</javac>
		<antcall target="_event.compile.post"/>
		<!-- flag for internal helpers -->
		<property name="__compiled" value="true"/> 
		
	</target>

	<!-- 
		<code><b>jaronly</b></code> -  Writes the jar to the current project-specific installation path. 
		<p>To be determined. This job writes the jar to the 
		current installation path, given by ${project.jar}. 
		<p>The value of ${project.jar} is is by default
		<code>${jar.home}/${project.jar.filename}</code>
		but this value might be overridden using property files. 
		<p>Suppose we have a project <code>myproj</code>, the following lines
		of the <code>init</code> target will generate a default value for <code>$project.jar</code>
		equal to <code>./lib/myproj.jar</code>
		<p><pre>
&lt;property name='jar.myproj' value='{$jar.lib}/${project.jar.filename}'/>
&lt;property name='project.jar' value='{$jar.myproj}'/>
		</pre>
		<p>If in a loaded ant property file we have defined <code>jar.myproj</code>
		then $project.jar will contain that value. Defining globally (in a shared build.properties file)
		the location of the jars built on a certain machine can be a way to keep references always
		up to date, without file duplicates. Of course if the library is going to break compatibility
		there could be a problem with this approach.
		<p>Example: 
		<pre>jar.ineo=f:/jars/ineo.jar</pre>
	-->		
	<target name="jaronly" depends="~compile" description="Builds the jar to the installation path. See [where].">
		<mkdir dir="${jar.home}"/>
		<antcall target="~dojarhelper">
			<param name="~dojarhelper.jar" value="${project.jar}"/>
		</antcall>
		<echo>The jar has been created in ${project.jar}</echo>
	</target>

	<!-- 
			<code><b>all</b></code> -  Builds both distributions and javadoc and generates all archives
	-->
	<target name="all" depends="srczip,binzip,srctar,bintar,javadoc,javadoczip,javadoctar" description="Builds both distributions and javadoc and all archives"/>
	
	
	
	<!-- 
			<code><b>jdepend</b></code> -  Builds JDepend report - TODO see why duplicate jdepend.path (== ${build.home} )
	-->
	<target name="jdepend" depends="~init" description="Builds JDepend report">
	
	 <mkdir dir="${jdepend.outdir}"/>
	 <jdepend format="text" outputfile="${jdepend.outdir}/jdepend-report.txt">
	      <exclude name="java.*"/>
	      <exclude name="javax.*"/>
	      <exclude name="org.xml.sax.*"/>
	      <exclude name="org.w3c.dom.*"/>
	      <classespath>
	        <pathelement location="${jdepend.path}"/>
	      </classespath>
	      <classpath location="${jdepend.path}"/>
	  </jdepend>
	</target>
	<!-- 
			<code><b>jdepend as xml and html</b></code> -  Builds JDepend report - TODO see why duplicate jdepend.path (== ${build.home} )
	-->
	<target name="jdependxml" depends="~init" description="Builds JDepend report as xml and html">
	<jdepend format="xml" outputfile="${jdepend.outdir}/jdepend-report.xml">
	      <!--exclude name="java.*"/-->
	      <!--exclude name="javax.*"/-->
	      <exclude name="org.xml.sax.*"/>
	      <exclude name="org.w3c.dom.*"/>
	      <classespath>
	        <pathelement location="${jdepend.path}"/>
	      </classespath>
	      <classpath location="${jdepend.path}"/>
	  </jdepend>
	  <fail if="${jdepend.xslt}" message="XSLT for transforming JDepend report output to HTML not found !, file: ${jdepend.xslt}"/>
   	 <style basedir="${jdepend.outdir}" destdir="${jdepend.outdir}" includes="jdepend-report.xml" style="${jdepend.xslt}"/>


	
	</target>

	<!-- /// BEGIN javadoc TARGETS /// -->
	
	<!--
		<code><b>javadoc</b></code> -  Builds the Javadoc-generated documentation to ${build.javadoc.home}
		<p>Builds javadoc and places it in ${build.javadoc.home} that
		might be <code>./build/javadoc</code> (default) or others like
		for example <code>./javadoc</code> or <code>./docs/javadoc</code> stdJavadocSetupPackageSet
	-->
	<target name="javadoc" depends="~initwork, ~dojavadoc" description="Builds javadoc">
		<move todir="${build.javadoc.home}">
			<fileset dir="${work.javadoc}"/>
		</move>
	</target>
    
    <!-- 
	~dojavadoc is an helper target

		<p>
		<ul>
		<p><b>Parameters - Properties</b></p>
		<li>
			Outputs to ${work.javadoc}
		</ul>
		<p>
		<ul>
		<p><b>Project specific configuration</b></p>

		<li> Packages are included using the dirset with id [javadoc.packages.dirset]
			that MUST BE defined in the [init] target.
		<li> External links are included using property names as ${javadoc.link.1},${javadoc.link.2} etc..max 6 items
		</ul>
    -->
    <target name="~dojavadoc">
    	<fail unless="__initialized" message="Eleant Ant File Usage Error: called internal helper directly."/>
        <property name="dojavadoc.dir" location="${work.javadoc}"/>
    	<echo>Output javadoc to ${dojavadoc.dir}</echo>
		<delete dir="${dojavadoc.dir}"/>
		<mkdir dir="${dojavadoc.dir}"/>
		<!-- give a default to links, otherwise javadoc errors -->
		<property name="javadoc.link.1" value=""/>
		<property name="javadoc.link.2" value=""/>
		<property name="javadoc.link.3" value=""/>
		<property name="javadoc.link.4" value=""/>
		<property name="javadoc.link.5" value=""/>
		<property name="javadoc.link.6" value=""/>
		<javadoc defaultexcludes="yes" destdir="${dojavadoc.dir}" author="${javadoc.author}" version="${javadoc.version}" use="${javadoc.use}" verbose="${javadoc.verbose}" access="${javadoc.access}" bottom="${javadoc.footer}" linksource="${javadoc.linksource}" doctitle="&lt;h1&gt;${javadoc.doctitle}&lt;/h1&gt;" classpath="${javadoc.classpath}" windowtitle="${javadoc.title}" stylesheetfile="${javadoc.css}">
			<!-- packages as a packageset/dirset -->
			<packageset refid="javadoc.packages.dirset"/>
			<!-- external documentation links -->
			<link href="${javadoc.link.1}"/>
			<link href="${javadoc.link.2}"/>
			<link href="${javadoc.link.3}"/>
			<link href="${javadoc.link.4}"/>
			<link href="${javadoc.link.5}"/>
			<link href="${javadoc.link.6}"/>
			<arg line="${javadoc.groups}"/>
		</javadoc>        
	</target>

	<!-- 
	~defaultSets is an internal helper that loads the default filesets and dirsets
	<p>This target is not called by anyone but is used for defining
	the default javadoc packageset and the default compile.extra.fileset (empty)
	when a target references them they are istantiated 	 
	-->
	<target name="~defaultSets" if="javadoc.packages">
		<fail message="ELEANT INTERNAL ASSERT FAILED: The ~defaultSets target should not be called"/>
		<!-- NOT ANYMORE NOW MUST PRODUCE ONE THE BUILD FILE dirset id='javadoc.packages.dirset' dir="${project.src}" defaultexcludes="yes">
		  <include name="${javadoc.packages}" />
		  <exclude name="${javadoc.packages.exclude}" />
		</dirset-->

		<fileset id="compile.extra.fileset" dir="${project.src}">
			<exclude name="**/*"/>
		</fileset>
		<fileset id="copycommonbuild.lib.fileset" dir="${project.src}">
			<exclude name="**/*"/>
		</fileset>
		<fileset id="distsrc.redistribuitedjars.fileset" dir=".">
			<exclude name="**/*"/>
		</fileset>
		<fileset id="distbin.redistribuitedjars.fileset" dir=".">
			<exclude name="**/*"/>
		</fileset>
	</target>

		
	
    <!-- /// end javadoc TARGETS /// -->
	
	<!-- /// BEGIN BUILD ARCHIVE TARGETS /// -->
	
	<!-- 
	<code><b>binzip</b></code> -  Builds a zip file containing the binary distribution
	<p>Output folder is ${build.zip.home}
    -->
	<target name="binzip" depends="bin" description="Builds zip of binary distribution">
        <mkdir dir="${build.zip.home}"/>
        <zip zipfile="${binzip.file}" basedir="${distbin}" includes="**"/>
        <checksum algorithm="md5" file="${srczip.file}" fileext=".md5"/>
		<checksum algorithm="sha" file="${srczip.file}" fileext=".sha"/>

    </target>
    <!-- 
	<code><b>srczip</b></code> -  Builds a zip file containing the source distribution
	<p>Output folder is ${build.zip.home}
    -->
	<target name="srczip" depends="src" description="Builds zip of source distribution">    
        <mkdir dir="${build.zip.home}"/>
        <zip zipfile="${srczip.file}" basedir="${distsrc}" includes="**"/>
		<checksum algorithm="md5" file="${srczip.file}" fileext=".md5"/>
		<checksum algorithm="sha" file="${srczip.file}" fileext=".sha"/>

    </target>
	<!-- 
	<code><b>bintar</b></code> -  Builds a tar file containing the binary distribution
	<p>Output folder is ${build.zip.home}
    -->
	<target name="bintar" depends="bin" description="Builds tar of binary distribution">
        <mkdir dir="${build.zip.home}"/>
        <tar tarfile="${bintar.file}" compression="${tar.compression}" basedir="${distbin}" includes="**"/>
        <checksum algorithm="md5" file="${bintar.file}" fileext=".md5"/>
		<checksum algorithm="sha" file="${bintar.file}" fileext=".sha"/>
        
    </target>
    
	<!-- 
	<code><b>srctar</b></code> -  Builds a tar file containing the source distribution
	<p>Output folder is ${build.zip.home}
    -->
	<target name="srctar" depends="src" description="Builds tar of source distribution">    
        <mkdir dir="${build.zip.home}"/>
        <tar tarfile="${srctar.file}" compression="${tar.compression}" basedir="${distsrc}" includes="**"/>
        <checksum algorithm="md5" file="${srctar.file}" fileext=".md5"/>
		<checksum algorithm="sha" file="${srctar.file}" fileext=".sha"/>
    </target>
        
    <!-- 
	<code><b>javadoczip</b></code> -  Builds a zip file containing the Javadoc-generated documentation
	<p>Output folder is ${build.zip.home}
    -->
	<target name="javadoczip" depends="~initwork,~dojavadoc" description="Builds javadoc as zip archive">
		<mkdir dir="${build.zip.home}"/>
		<zip zipfile="${javadoc.zip.file}" basedir="${work.javadoc}" includes="**"/>
	</target>

	<!-- 
	<code><b>javadoctar</b></code> -  Builds a tar file containing the Javadoc-generated documentation
	<p>Output folder is ${build.zip.home}
    -->
	<target name="javadoctar" depends="~initwork,~dojavadoc" description="Builds javadoc as tar archive">
		<mkdir dir="${build.zip.home}"/>
		<tar tarfile="${javadoc.tar.file}" compression="${tar.compression}" basedir="${work.javadoc}" includes="**"/>
	</target>

	<!-- 
	<code><b>javadocall</b></code> -  Builds a tar and a zip file containing the Javadoc-generated documentation
	<p>Output folder is ${build.zip.home}
    -->
	<target name="javadocall" depends="javadoczip,javadoctar" description="Builds javadoc as tar and zip">
	</target>

	<!-- /// END BUILD ARCHIVE TARGETS /// -->
	
	<!-- /// CLEAR /// -->
	
	<!-- 
	Internal initialization helper for ~clear
	 -->
	<target name="~initclear" depends="~init">
		<delete dir="${work.dir}"/>
	</target> 
	
	<!-- 
	<code><b>clear</b></code> -  Clears the build ${build.home} and working ${work.dir} directories.
    -->
	<target name="clear" depends="~initclear" description="Deletes the build folder.">
		<delete dir="${build.home}"/>
	</target> 
	<!-- 
	<code><b>clearzip</b></code> -  Clears the zip files, when they are 
	not in the same folder as the build files (default case)
    -->
	<target name="clearzip" depends="~initclear,clearjdoczip" description="Deletes all the archive files.">
		<delete file="${srctar.file}"/>
		<delete file="${bintar.file}"/>
		<delete file="${srczip.file}"/>
		<delete file="${binzip.file}"/>
	</target> 
	<!-- 
	<code><b>clearjar</b></code> -  Clears the zip files, when they are 
	not in the same folder as the build files (default case)
    -->
	<target name="clearjar" depends="~initclear" description="Deletes the installed project jar file. See [where].">
		<delete file="${project.jar}"/>
	</target> 
	<!-- 
	<code><b>clearjdoc</b></code> -  Clears the javadoc folder.
    -->
	<target name="clearjdoc" depends="~initclear" description="Clears the javadoc folder.">
		<delete dir="${build.javadoc.home}"/>
	</target> 
	<!-- 
	<code><b>clearjdoczip</b></code> -  Clears all the javadoc archive files.
    -->
	<target name="clearjdoczip" depends="~initclear" description="Clears the javadoc archives.">
		<delete file="${javadoc.zip.file}"/>
		<delete file="${javadoc.tar.file}"/>
	</target> 
	<!-- 
	<code><b>clearjdocall</b></code> -  Clears all the javadoc files and archives.
	-->
	<target name="clearjdocall" depends="clearjdoc,clearjdoczip" description="Clears all the javadoc files and archives."/>
	
	<!-- 
	<code><b>cleardist</b></code> -  Clears all but not the jar file. 
	<ul>
		<li>deletes build folder ${build.home}  
		<li>deletes working folder ${work.dir} 
		<li>deletes all archives in ${build.zip.home} 
		<li>deletes all generated javadoc files and archives
	</ul>
	-->
	<target name="cleardist" depends="clear,clearzip,clearjdoc,clearjar" description="Clears dist: build,javadoc and archives.">
		<delete dir="${build.home}"/>
		<delete dir="${work.dir}"/>
	</target> 
	<!-- 
	<code><b>clearall</b></code> -  Clears all. 
	<ul>
		<li>deletes build folder ${build.home}  
		<li>deletes working folder ${work.dir} 
		<li>deletes all archives in ${build.zip.home} 
		<li>deletes all generated javadoc files and archives
		<li>deletes project jar file
	</ul>
    -->
	<target name="clearall" depends="cleardist,clearjar" description="Clears all: jar, build,javadoc and archives.">
		<delete dir="${build.home}"/>
		<delete dir="${work.dir}"/>
	</target> 	    	    
    <!-- 
	<code><b>where</b></code> -  Shows infos about the project paths
    -->
	<target name="where" depends="~init" description="Shows infos about the project paths.">
		<echo>${project.label}</echo>
		<echo>-------------------------------------------------------------</echo>
		<echo>PROJECT FOLDERS</echo>
	    <echo message=" Project [${name}] version [${version}]"/>
        <echo message=" Ant project folder: ${basedir}"/>
        <echo message=" Source files folder: ${project.src}"/>
        <echo>BUILD OUTPUT FOLDERS</echo>
	    <echo message=" Build : ${build.home}"/>
	    <echo message=" Compiled classes: ${build.classes.home}"/>
        <echo message=" Binary dist: ${distbin}"/>
        <echo message=" Source dist: ${distsrc}"/>
		<echo message=" Source dist sources: ${distsrc.source.dir}"/>
    	<echo message=" Javadoc: ${build.javadoc.home}"/>
	    <echo message=" Archives: ${build.zip.home}"/>
        <echo message=" Temp: ${temp.dir}"/>
        <echo message=" Working folder: ${work.dir}"/>
        <echo message="The build folder can be deleted with target [clear]"/>
	    <echo message="All the archive files can be deleted with target [clearzip]"/>
	    <echo message="The javadoc folder can be deleted with target [clearjdoc]"/>
	    <echo message="Clear all with target [clearall]"/>
	    <echo>JAR</echo>
		<echo> The project jar is ${project.jar}</echo>
		<echo> The [jaronly] ant target will write the jar to this location.</echo>
		<echo> Use [classpath] ant target to see compilation infos.</echo>
		<echo> Use [version] ant target to see version infos.</echo>
	</target>
	<!-- 
	<code><b>classpath</b></code> -  Classpath infos help target.
	-->
	<target name="classpath" depends="~init" description="Shows infos about the project classpaths.">
		  <echo>${project.label}</echo>
		  <echo>-------------------------------------------------------------</echo>	
		  <echo>Classpath:</echo>
		  <echo>${javac.classpath}</echo>
	</target>
	<!-- 
	<code><b>version</b></code> -  Versions infos help target.
	-->
	<target name="version" depends="~init" description="Versions infos">
		<echo message="Build file of project [${name}] version ${version}"/>
		<echo message="${project.label}"/>
		<echo message="Java VM version: ${ant.java.version}"/>
		<echo message="${ant.version}"/>
		<echo message="Type [ant -diagnostics] for more Ant info."/>
	</target>

    <!-- 
	<code><b>help</b></code> -  Help target.
	-->
    <target name="help" depends="~init" description="Help">
		<echo message=""/>
		<echo message=""/>
		<echo message="Build file of project [${name}] version ${version}"/>
		<echo message="${project.label}"/>
		<echo message="-------------------------------------------------------------"/>
		<echo message=" Type [ant -p] for all the available targets."/>
		<echo message=" Type [ant where] for infos about project paths."/>
		<echo message=" Type [ant version] for versioning info."/>
		<echo message="-------------------------------------------------------------"/>
		<echo message="SOURCE / COMPILE"/>
		<echo message=" build      --&gt; generates the classes."/>
		<echo message=" jaronly    --&gt; creates the project jar file. See [where] target."/>
		<echo message=" fixcrlf    --&gt; fixes crlf issues in the source."/>
		<echo message="DISTRIBUTIONS "/>
		<echo message=" bin        --&gt; creates the binary dist"/>
		<echo message=" binzip     --&gt; creates the binary dist zip"/>
		<echo message=" bintar     --&gt; creates the binary dist tar"/>
		<echo message=" src        --&gt; creates the source dist "/>
		<echo message=" srczip     --&gt; creates the source dist zip "/>
		<echo message=" srctar     --&gt; creates the source dist tar"/>
		<echo message=" all        --&gt; creates both dist and javadoc and all archives"/>
		<echo message="JAVADOC"/>
		<echo message=" javadoc    --&gt; generates the API documentation"/>
		<echo message=" javadoczip --&gt; generates the API documentation as a tar/gz"/>
		<echo message=" javadoctar --&gt; generates the API documentation as a zip"/>
		<echo message=" javadocall --&gt; generates the API documentation as zip and tar"/>
		<echo message="INFO / MANAGE (see [ANT -p] for full list)"/>
		<echo message=" jdepend    --&gt; creates JDepend report in text format."/>
		<echo message=" jdependxml --&gt; creates JDepend report in xml and html format."/>
		<echo message=" version    --&gt; shows versions of build project components."/>
		<echo message=" clear      --&gt; clears the build dir"/>
		<echo message=" clearzip   --&gt; clears all the archive files."/>
		<echo message=" clearjdoc  --&gt; clears all the javadoc files."/>
		<echo message=" where      --&gt; shows project paths infos"/>
		<echo message=" classpath  --&gt; shows project java classpath infos"/>
		<echo message=" help       --&gt; shows project help (this)"/>

	</target>

    
    <!-- ///////////////////////// INTERNAL HELPERS //////////////////////-->
    
    <!-- 
	Internal helper to make the jar from the work.classes folder 
	@param {~dojarhelper.jar} the name of the destination jar
	<p>This helper DOES NOT require the ${work.manifest} property
	to be defined (usually MANIFEST.MF) in init, if is not defined
	will generate a default manifest.
	Note that a manifest must be always present and ANT generates
	a default one if not specified, so using @nomanifest means 
	"generate default manifest". Might disallow extended manifest and leave only top infos(todo)
	or replace the manifest ant code with <ant> element that
	defines a [work.manifest] property.
	<p>This helper deliberately does not depend on anything
	to not cause a new init etc, the caller must have already
	called or be dependent from <code>~compile</code> target.
    -->
    <target name="~dojarhelper">
    	<fail unless="__initialized" message="Eleant Ant File Usage Error: called internal helper directly."/>
        <fail unless="__compiled" message="Eleant Ant File Usage Error: called internal helper internally without compilation."/>
		<antcall target="~dojarhelperWithoutManifest"/>
		<antcall target="~dojarhelperWithManifest"/>

    </target>
	<target name="~dojarhelperWithoutManifest" unless="work.manifest">
        <jar whenempty="fail" index="true" jarfile="${~dojarhelper.jar}" basedir="${work.classes}">
<!-- manifest might not be empty -->
        </jar>
    </target>
	<target name="~dojarhelperWithManifest" if="work.manifest">
        <jar whenempty="fail" index="true" jarfile="${~dojarhelper.jar}" manifest="${work.manifest}" basedir="${work.classes}">
<!-- manifest might not be empty -->
        </jar>
    </target>
    <!-- 
	Internal helper to copy common files distribuited with
	both source and binary version to the passed directory
	<p><b>Parameters</b>
	<p><code>${~copycommonbuild.dest}</code> the path to the destination directory
	<p><b>Event targets called</b>
	<ul>
	<li><code>_event.alldist<code> - Called passing parameter of 
	current distribution build folder: <code>_event.param.dest</code>
	</ul>
	<p>This helper deliberately does not depend on anything
	to not cause a new init etc, the caller must have already
	called or be dependent from <code>~init</code> target.
    -->
    <target name="~copycommonbuild">
    	<antcall target="_event.alldist">
            <param name="_event.param.dest" value="${~copycommonbuild.dest}"/>
        </antcall>
        
        <fail unless="__initialized" message="Eleant Ant File Usage Error: called internal helper directly."/>
        <copy todir="${~copycommonbuild.dest}">
    		<fileset file="${project.license}"/>
    		<fileset file="${project.readme.file}"/>
    	</copy>
        <mkdir dir="${~copycommonbuild.dest}/${lib.home}"/>
        <copy todir="${~copycommonbuild.dest}/${lib.home}">
        	<mapper type="flatten"/>
			<fileset refid="copycommonbuild.lib.fileset"/>
        </copy>
		<!-- create a temporary version file in work dir-->
		<property name="work.versionfile" location="${work.dir}/version.txt"/>
		<!-- I don't know why do I have to put these #13, that theoretically should not work, I believe -->
		<concat append="true" destfile="${work.versionfile}">
Project: ${name} 
&#13;
Version: ${version}
&#13;
Label: ${project.label}
&#13;
Built: ${now} -	${TODAY}
		</concat>
		<copy todir="${~copycommonbuild.dest}">
			<!--filterchain>
		  	  <expandproperties/>
		  	</filterchain-->
			<fileset file="${work.versionfile}"/>
		</copy>								 <!-- includes="**/*.txt,**/*.html"  -->
	  	
	  

	</target>
<!-- 
	
	END OF eleant.xml include xml file 
	
-->
<target name="_event.bin.post"/>
<target name="_event.bin.pre"/>
<target name="_event.compile.pre"/>
<target name="_event.compile.post"/>
<target name="_event.src.pre"/>
<target name="_event.src.post"/>
</project>
